/*
Copyright (c) 2019 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Representation of an identity provider.
@go(name = "IDP")
class IdentityProvider {
	// Type of identity provider. The rest of the attributes will be populated according to this
	// value. For example, if the type is `github` then only the `github` attribute will be
	// populated.
	Type IdentityProviderType

	// The name of the identity provider.
	name string

	// When `true` unauthenticated token requests from non-web clients (like the CLI) are sent a
	// `WWW-Authenticate` challenge header for this provider.
	challenge boolean

	// When `true` unauthenticated token requests from web clients (like the web console) are
	// redirected to the authorize URL to log in.
	login boolean

	// Controls how mappings are established between this provider's identities and user
	// objects.
	MappingMethod IdentityProviderMappingMethod

	// Details for `github` identity providers.
	Github GithubIdentityProvider

	// Details for `gitlab` identity providers.
	Gitlab GitlabIdentityProvider

	// Details for `google` identity providers.
	Google GoogleIdentityProvider

	// Details for `ldap` identity providers.
	LDAP LDAPIdentityProvider

	// Details for `openid` identity providers.
	OpenID OpenIDIdentityProvider
}

// Type of identity provider.
enum IdentityProviderType {
	Github
	Gitlab
	Google
	LDAP
	OpenID
}

// Controls how mappings are established between provider identities and user objects.
enum IdentityProviderMappingMethod {
	Claim
	Lookup
	Generate
	Add
}

// Details for `github` identity providers.
struct GithubIdentityProvider {
	// Optional trusted certificate authority bundle to use when making requests tot he server.
	ca string

	// Client identifier of a registered _GitHub_ OAuth application.
	client_id string

	// For _GitHub Enterprise_ you must provide the host name of your instance, such as
	// `example.com`. This value must match the _GitHub Enterprise_ host name value in the
	// `/setup/settings` file and cannot include a port number.
	//
	// For plain _GitHub_ omit this parameter.
	hostname string

	// Optional list of temas. Cannot be used in combination with the organizations field.
	teams []string
}

// Details for `gitlab` identity providers.
struct GitlabIdentityProvider {
	// Optional trusted certificate authority bundle to use when making requests tot he server.
	ca string

	// Client identifier of a registered _GitLab_ OAuth application.
	client_id string

	// Client secret issued by _GitLab_.
	client_secret string

	// URL of the _GitLab_ instance.
	url string
}

// Details for `google` identity providers.
struct GoogleIdentityProvider {
	// Client identifier of a registered _Google_ project.
	client_id string

	// Client secret issued by _Google.
	client_secret string

	// Optional hosted domain to restrict sign-in accounts to.
	hosted_domain string
}

// Details for `ldap` identity providers.
struct LDAPIdentityProvider {
	// LDAP attributes used to configure the provider.
	LDAPAttributes LDAPAttributes

	// Optional distinguished name to use to bind during the search phase.
	bind_dn string

	// Optional password to use to bind during the search phase.
	bind_password string

	// Certificate bundle to use to validate server certificates for the configured URL.
	ca string

	// An [RFC 2255](https://tools.ietf.org/html/rfc2255) URL which specifies the LDAP host and
	// search parameters to use.
	url string

	// When `true` no TLS connection is made to the server. When `false` `ldaps://...` URLs
	// connect using TLS and `ldap://...` are upgraded to TLS.
	insecure boolean
}

// LDAP attributes used to configure the LDAP identity provider.
struct LDAPAttributes {
	// List of attributes to use as the mail address.
	email []string

	// List of attributes to use as the identity.
	id []string

	// List of attributes to use as the display name.
	name []string

	// List of attributes to use as the preferred user name when provisioning a user.
	preferred_username []string
}

// Details for `openid` identity providers.
struct OpenIDIdentityProvider {
	// Certificate bunde to use to validate server certificates for the configured URL.
	ca string

	// Claims used to configure the provider.
	Claims OpenIDClaims

	// Identifier of a client registered with the _OpenID_ provider.
	client_id string

	// Client secret.
	client_secret string

	// Optional map of extra parameters to add to the authorization token request.
	extra_authorize_parameters [string]string

	// Optional list of scopes to request, in addition to the `openid` scope, during the
	// authorization token request.
	extra_scopes []string

	// URLs of the provider.
	URLS OpenIDURLs
}

// _OpenID_ identity provider claims.
struct OpenIDClaims {
	// List of claims to use as the mail address.
	email []string

	// List of claims to use as the display name.
	name []string

	// List of claims to use as the preferred user name when provisioning a user.
	preferred_username []string
}

// _OpenID_ identity provider URLs.
struct OpenIDURLs {
	// Authorization endpoint described in the _OpenID_ specification. Must use HTTPS.
	authorize string

	// Token endpoint described in the _OpenID_ specification. Must use HTTPS.
	token string

	// User information endpoint described in the _OpenID_ specification. Must use HTTPS.
	user_info string
}
